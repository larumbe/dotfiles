;; Actualiza helm
;; C-z should be a prefix command

;; You need to set the whole file in org mode for drawers
;; and additional references

;;; Global theme customisation
(setq custom-enabled-themes '(misterioso))
(load-theme 'misterioso t)
;;	 Fuera barras de desplazamiento
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;	I do not want a welcome message
(setq inhibit-startup-message t)

;; Mode line stuff
;; (display-time-mode t)
(column-number-mode t)
;; (size-indication-mode t)

;; Global unsets
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-M-z") 'suspend-frame)

;; Fast motion
(global-set-key (kbd "C-z C-k") 'windmove-up)
(global-set-key (kbd "C-z C-j") 'windmove-down)
(global-set-key (kbd "C-z C-h") 'windmove-left)
(global-set-key (kbd "C-z C-l") 'windmove-right)

;; Paquetes y esas cosas
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ;; ("marmalade" . "http://marmalade-repo.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)
(global-set-key (kbd "C-z M-p") 'package-list-packages)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Fast .emacs opening ;;;;
(global-set-key (kbd "C-z .") '(lambda () (interactive) (find-file "~/.emacs")))

;;; Beautification ;;;;;;;
(tool-bar-mode -1)
(menu-bar-mode -1)

;;; La Carte for menus
(global-set-key (kbd "C-z C-c") 'lacarte-execute-menu-command)

;; Revisa esto, es codigo feo
(load-file "~/.emacs.d/etags-select.el")
(load-file "~/.emacs.d/tags.el")
;; Mira para que es require
(require 'etags-select)

(define-prefix-command 'etags-prefix nil "Tags action: b (build), v (visit)")
(global-set-key (kbd "C-z t") 'etags-prefix)
(define-key etags-prefix (kbd "b") 'build-ctags)
(define-key etags-prefix (kbd "v") 'visit-tags-table)

;; I-resize mode
;; Tienes que mejorar este codigo, es una puta mierda
(load-file "~/.emacs.d/iresize.el")
(require 'iresize)
(global-set-key (kbd "C-z r") 'iresize-mode)

;; Motion mode
(load-file "~/.emacs.d/motion-mode.el")

;; Las dos que siguen, yas y autocomplete
;; A ver si consigues enterarte de como remapear yas-expand para que sea
;; C-y y autocomplete sea el puto tab de los cojones
;; !!!!!!!!!!!!!!!!!!!

;; Auto-complete settings
(load-file "~/.emacs.d/autocomplete-start.el")

;; Avance progresivo
;; (setq scroll-step 1)

;; Shell mode
(add-hook 'shell-mode-hook (lambda () (interactive)(define-key shell-mode-map (kbd "C-c i") 'send-invisible)))
(add-hook 'shell-mode-hook (lambda () (interactive)(define-key shell-mode-map (kbd "C-'") '(lambda () (interactive) (insert "-")))))
(global-set-key (kbd "C-z C-s") 'shell)
;; (define-key shell-mode-hook (kbd "C-c C-w") 'woman)

;; Imenu and insert file
(global-set-key (kbd "C-x M-i") 'insert-file)
(global-set-key (kbd "C-x i") 'imenu)

;; Viper mode
;; Superseded by motion mode
;; (global-set-key (kbd "C-x C-z") 'toggle-viper-mode)

;; Cosas de parentesis e ido
(electric-pair-mode t)
(show-paren-mode t)

;; Ido es pesadisimo, tendras que encontrar alterantivas
;; (ido-mode t)
(global-set-key (kbd "C-x C-j") 'idomenu)

;; Yanking in the opposite direction
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))

(global-set-key (kbd "C-M-y") 'yank-pop-forwards)

;; Mas atajos de teclado para comodidad
(global-set-key (kbd "C-M-]") 'eval-expression)
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
(global-set-key (kbd "C-z p") 'pop-tag-mark)
(global-set-key (kbd "C-x l") 'kill-whole-line)
(global-set-key (kbd "C-z c") 'count-lines-page)
;; (global-set-key (kbd "C-x p") 'switch-to-prev-buffer)
;; (global-set-key (kbd "C-x p") 'previous-buffer)
(defun switch-to-previous-buffer ()
  "Goes to the most recent previous buffer"
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
(global-set-key (kbd "C-x p") 'switch-to-previous-buffer)

;; Anything mode
;; Cambialo por helm inmediatamente
(require 'anything)
(global-set-key (kbd "C-x a") 'anything)
;; (global-set-key (kbd "C-q m") 'anything-help)
(define-key anything-map (kbd "C-q m") 'anything-help)

;; Help key bindings
(global-set-key (kbd "C-q") 'help-command)
(global-set-key (kbd "C-q C-w") 'where-is)
;; (global-set-key (kbd "C-q G") 'describe-gnu-project)
(global-set-key (kbd "C-q g") 'find-function) ; Go to function definition
(global-set-key (kbd "C-q C-q") 'quoted-insert)
(global-set-key (kbd "C-h") 'delete-backward-char)

;; ERC
(global-set-key (kbd "C-z e") 'erc-iswitchb)
(setq erc-log-channels-directory "~/log")
(setq erc-save-buffer-on-part t)
(setq erc-hide-timestamps t)

;; yas-snippets
(require  'yasnippet)
;; (load-file "~/.emacs.d/yas-start.el")

;; (define-key erc-mode-map (kbd "C-c q") 'erc-cmd-QUERY)

;; AuCTeX stuff
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; For the navigator
(setq browse-url-browser-function 'w3m-browse-url)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program modes start here ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Como puedo hacer para que solo se cargue el fichero si se llama al modo
;; Y en una sola vez, se haga en sucesivas aperturas de ficheros de tal modo

;; PHP
(load-file "~/.emacs.d/php-start.el")

;; Perl
;; (load-file "~/emacs/.emacs.d/perl-mode-start.el")

;; Python
;; Arreglalo, no se que cojones le pasa a todos esos paquetes
;; (load-file "~/.emacs.d/python-start.el") 

;; HTMl

;; Java
(load-file "~/.emacs.d/java-start.el")

;; Haskell
(load-file "~/.emacs.d/haskell-mode-start.el")

;; Bash

;; emacs-lisp-mode
(load-file "~/.emacs.d/elisp-mode-start.el")

;; c-mode
(load-file "~/.emacs.d/c-mode-start2.el")

;; C++

;; ASM
(load-file "~/.emacs.d/asm-start.el")

;;; Scheme
;; (load-file "~/emacs/.emacs.d/scheme-start.el")

;; Maple

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program modes end here ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ibus
(setq instalacion "~/.emacs.d/")
(load-file (concat instalacion "ibus-dev.el"))
(global-set-key (kbd "C-c C-\\") 'ibus-mode)
(defun start-ibus ()
  (interactive)
  (ibus-enable)
  (ibus-mode)
  )
(global-set-key (kbd "C-z M-b") 'start-ibus)

;; Sudo editing of files
(defun su-edit ()
  "Edit the current buffer file as superuser."
  (interactive)
  (let ((window-start (window-start))
        (point        (point))
        (mark (if mark-active (region-beginning) nil)) )
    (find-alternate-file (format "/sudo::%s" (buffer-file-name)))
    (if mark (set-mark mark))
    (goto-char point)
    (set-window-start nil window-start) ; nil - the selected window
    ))

;; Function for swapping windows

;; GNUS
(load-file "~/.gnus.el")
(global-set-key (kbd "C-z g") 'gnus)

;; Dictionary mode for w3m
(require 'w3m)
(define-key w3m-mode-map (kbd "C-c d") 'dic-lookup-w3m)
(define-key w3m-mode-map (kbd "o") 'w3m-view-this-url)
(define-key w3m-mode-map (kbd "y") 'w3m-view-previous-page)

;; Eclim
(require 'eclim)
(require 'eclimd )
(setq eclim-executable "/opt/eclipse/eclim")
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-firefox-program "/opt/firefox/firefox-bin")
 '(custom-enabled-themes (quote (misterioso)))
 '(eclim-eclipse-dirs (quote ("/opt/eclipse"))))
(setq eclimd-executable "/opt/eclipse/eclimd")
;; (setq eclimd-wait-for-process nil)
;; start-eclimd para iniciar el demonio
;; Esto tendras que verlo, en autocomplete
(require 'auto-complete-config)
(ac-config-default)
(require 'ac-emacs-eclim-source)
(ac-emacs-eclim-config)

;; ECB
(require 'ecb)
(global-set-key (kbd "C-x C-M-e") 'ecb-minor-mode)
(define-prefix-command 'ecb-myprefix nil "Goto ECB Frame (1,2,c,d,h,m,s)")
(define-key ecb-mode-map (kbd "C-c C-.") 'ecb-myprefix)
(define-key ecb-myprefix (kbd "1") 'ecb-goto-window-edit1)
(define-key ecb-myprefix (kbd "2") 'ecb-goto-window-edit2)
(define-key ecb-myprefix (kbd "c") 'ecb-goto-window-compilation)
(define-key ecb-myprefix (kbd "d") 'ecb-goto-window-directories)
(define-key ecb-myprefix (kbd "h") 'ecb-goto-window-history)
(define-key ecb-myprefix (kbd "m") 'ecb-goto-window-methods)
(define-key ecb-myprefix (kbd "s") 'ecb-goto-window-sources)

;; Quiza todo lo de semantic deberia ir aqui

;; Flymake stuff
;; SHOULD DISPLAY ERRORS IN BUFFER
;; Customize how flymake displays the errors
'(flymake-errline ((((class color)) (:underline "OrangeRed"))))
'(flymake-warnline ((((class color)) (:underline "yellow"))))
;; Define our own flymake error function
(defun my-flymake-show-next-error ()
  (interactive)
  (flymake-goto-next-error)
  (flymake-display-err-menu-for-current-line))
;; And set it to the shortcut C-c C-v
;; (add-hook 'c-mode-common-hook
;;   (lambda ()
;;     ;; (flymake-mode t)
;;     ;; (global-set-key "\C-c\C-v" 'my-flymake-show-next-error)
;;     ))

;; Macros
;; Use M-RET as a macro prefix
;; Dot mode for redoing
;; Cx q kbd-macro-query en el prefijo que dije antes
;; Repeat last command?
(global-set-key (kbd "C-.") 'repeat)
;; Look commands for marking different objects
(global-set-key (kbd "C-z SPC") 'delete-trailing-whitespace)
;; ibuffer mode
;; (global-set-key (kbd "C-x C-b") 'ibuffer-list-buffers)
(global-set-key (kbd "C-x C-b") 'ibuffer)
;; iswitchbf-highlight
;; (load-file "~/emacs/.emacs.d/switchwindow.el")
;; usa mas los menus
;; iswitch menu no funciona, pero usa los menos de alguna forma

;; Icicles
;; You should set a prefix key for all things icicles
(global-set-key (kbd "C-x c") 'icy-mode)
;; icicle-goto-marker
;; icicle-goto-global-marker

;; Find file other vertical window
(defun iswitchb-other-window-vertical ()
  "Switching to another buffer, but this shows on a upright window"
  (interactive)
  (split-window-right)
  (iswitchb-buffer-other-window))
(global-set-key (kbd "C-x 4 C-b") 'iswitchb-other-window-vertical)

;; X WINDOWS
;; kill-buffer-other-window
;; swap-windows

(defun swap-previous ()
  "Swap window with the previous one"
  (interactive)
  (let ((this-win-buffer (current-buffer))
	(prev-window-buffer (window-buffer (previous-window)))
	)
    (set-window-buffer (previous-window) this-win-buffer)
    (set-window-buffer (selected-window) prev-window-buffer)
    (select-window (previous-window))))

(defun swap-next ()
  "Swap window with the next one"
  (interactive)
  (let ((this-win-buffer (current-buffer))
	(next-window-buffer (window-buffer (next-window)))
	)
    (set-window-buffer (next-window) this-win-buffer)
    (set-window-buffer (selected-window) next-window-buffer)
    (select-window (next-window))))

(global-set-key (kbd "C-z k") 'swap-previous)
(global-set-key (kbd "C-z j") 'swap-next)

;; X MOTION
;; Puedes reasignar C-M-v scroll-other-window

;;; 7.2 MOVING THE POINT

;; Other window scroll'
(global-set-key (kbd "C-x P") 'mark-page)
(global-set-key (kbd "C-x C") 'set-goal-column)
(global-set-key (kbd "C-x C-n") 'scroll-other-window)
(global-set-key (kbd "C-x C-p") 'scroll-other-window-down)

;; Paragraph motion
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

;;; Scroll commands
;;; I can't keep the C-z combo active after each use, pain in the ass
;; (global-set-key (kbd "C-z C-n") 'scroll-up-command)
;; (global-set-key (kbd "C-z C-p") 'scroll-down-command)

;;; 9 - RUNNING COMMANDS BY NAME
;;; execute-extended-command
(global-set-key (kbd "C-z C-e") 'execute-extended-command)

;; 11 MARK
;; (delete-selection-mode ) ; causes self-insert-command to replace text in the active region
;; Another library for marking things thing-cmds.el (ThingAtPointCommands)
;; Need to make this library run, seems a lot better
;; Automark
;; Mark-tools
;; MakingMarkVisible
;; Anything mark
;; Con icycles para ver el mark ring

;; http://www.emacswiki.org/emacs/MarkCommands

;; Thing at point and add-ons
(require 'thing-cmds)
;; (thgcmd-bind-keys) ; Only if you want the key bindings it defines

(defun mark-a-word-or-thing (arg)
  "Select word on or before current point, and move point to beginning of word.

    With a prefix ARG, first prompts for type of things and select ARG things
    but you need to move the point to the beginnig of thing first.

    But if a thing has been selected, then extend the selection by one thing
    on the other side of the point.
    (So to select backwards, select to the right first.)"
  (interactive "P")
  (if (or arg mark-active)
      (call-interactively 'mark-thing)
    (skip-syntax-backward "w_")
    (mark-thing 'symbol)))

(global-set-key (kbd "C-x w") 'mark-a-word-or-thing)

;;; Browsing mark ring
(global-set-key (kbd "C-z f") 'forward-mark)
(global-set-key (kbd "C-z b") 'backward-mark)
(global-set-key (kbd "C-z s") 'show-marks)

;;; Browsing the kill ring (Melpa package)
(require 'browse-kill-ring)
(global-set-key (kbd "C-z y") 'browse-kill-ring)

;; RECTANCLES

;; 13 REGISTERS
;; view-register es extremadamente ineficiente
;; I don't know which registers have bound values
;; anything register interface
;; Position registers, how to jump fast to them

;;; 14 DISPLAY
;;; Line truncation
(global-set-key (kbd "C-z M-t") 'toggle-truncate-lines)

;;; 18 FILES
;;;
;; Inserts the default directory into the minibuffer as the initial contents
;; (setq insert-default-directory nil)
;; (global-set-key (kbd "C-z M-p") 'pwd)
;;; List of functions to be called after a file is successfully loaded
;; (setq find-file-hook ?)


;;; 19 BUFFERS
(defun kill-buffer-other-window ()
  "Kills buffer in the other window, make sure there are only two of them"
  (interactive)
  ;; How to make sure there are only two displayed windows
  (other-window 1)
  (kill-buffer)
  ;; This should be done with save-excursion most likely
  (other-window 1))
(global-set-key (kbd "C-z 0") 'kill-buffer-other-window)

;;; Fast buffer switch
(global-set-key (kbd "C-z C-p") 'previous-buffer)
(global-set-key (kbd "C-z C-n") 'next-buffer)
;; (global-set-key (kbd "M-v") 'previous-buffuer)
;; (global-set-key (kbd "C-v") 'next-buffer)

;;; Don't ask for confirmation before killing an unmodified buffer
 (defun volatile-kill-buffer ()
   "Kill current buffer unconditionally."
   (interactive)
   (let ((buffer-modified-p nil))
     (kill-buffer (current-buffer))))
(global-set-key (kbd "C-x k") 'volatile-kill-buffer)

;;; 22 INTERNATIONAL
(global-set-key (kbd "C-z M-i") 'set-input-method)

;;; 24 - INDENTATION
;; (setq-default tab-width 4)

(global-set-key (kbd "C-z i") 'indent-relative)

;; 28 MAINTAINING LARGE PROGRAMMES
;; Version control and the like
;; http://www.emacswiki.org/emacs/Git
;; http://alexott.net/en/writings/emacs-vcs/EmacsGit.html
;; Magit, most popular interface
(autoload 'magit-status "magit" nil t)
(global-set-key (kbd "C-z m") 'magit-status)
;; magit-repo-dirs (default repositories to look at after magit-status)


(global-set-key (kbd "C-z l") 'load-file)

(global-set-key (kbd "C-z C-f") 'fill-region)

;;; DIRED
;; Just a single dired buffer
;; Por que cojones no funciona?
(require 'dired-single)
;;;
(define-key dired-mode-map (kbd "C-c C-w") 'wdired-change-to-wdired-mode)

;;; Inactivie minibuffer mode
(define-key minibuffer-local-map (kbd "C-'") 'print-hyphen)

(defun kill-all-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let ((count 0))
      (dolist (buffer (buffer-list))
	(set-buffer buffer)
	(when (equal major-mode 'dired-mode)
	  (setq count (1+ count))
	  (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count))))

(global-set-key (kbd "C-x C-d") 'kill-all-dired-buffers)

;; Reference card things ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Learn about dired, dired enhanced ;;

;;; Anything setup
;;; http://www.emacswiki.org/emacs/Anything
;;; http://metasandwich.com/2010/07/30/what-can-i-get-for-10-dolla-anything-el/
;;; anything.el basic stuff, anything-


;;; Org mode
(load-file "~/.emacs.d/org-start.el")

;;; InfoMode stuff ;;;
(define-key Info-mode-map (kbd "o") 'Info-follow-nearest-node)
(define-key Info-mode-map (kbd "y") 'Info-history-back)
(define-key Info-mode-map (kbd "S-SPC") 'Info-scroll-down)

;;; Open scratch buffer
(defun switch-to-temporary-buffer ()
  "Switches to scratch temporary buffer"
  (interactive)
  (pop-to-buffer "temp"))
(global-set-key (kbd "C-z C-b") 'switch-to-temporary-buffer)

;;; Print working dir
(global-set-key (kbd "C-z w") 'pwd)

;;; Winner mode configuration
(winner-mode)
(define-key winner-mode-map (kbd "C-z C-;") 'winner-undo)
(define-key winner-mode-map (kbd "C-z C-'") 'winner-redo)

;;; Highlight line mode
(hl-line-mode t)
(setq hl-line-sticky-flag t)

;; /* Yasnippet shouldn't expandd automatically' */
;; /* Whhat's the fucking difference between ac-complete-c-headers and  ac-c-headers ?*/
;;; Autocmplete sin necesidad de haber escrito algo, con lo que llevo de antes
;;; flymake support for c
;;; How to expand the first option with tab?
;;; fucking include snippet sucks dick
;;; better yasnippet collection for c and cc mode, standard one sucks cock
;;; gnu global for c files, helm interface for it would be best
;;; Difference c-mode-hook c-mode-common-hook

;;; Autocomplete:
;;;	Poder completar sin tener que aniadir caracteres
;;;	Completar la primera entrada sin tener que bajar
;;;	Consultar comodamente las fuentes
;;; Yasnippet
;;;	Better snippet collection
;;; Flymake
;;;	Solo funciona si hay un Makefile con el objetivo CHK en el directorio actual, no podria cambiarse?
;;;	What's the flymake"
;;;	flymake for shell?
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highline-face ((t (:background "grey18"))) t)
 '(hl-line ((t (:background "gray18")))))

;;; ERC, eventually move it into its own file
(global-set-key (kbd "C-z 1") 'erc)

;;; Auto-fill mode, change section
(global-set-key (kbd "C-z M-f") 'auto-fill-mode)

;;; Mejorar
(global-set-key (kbd "C-]") 'scroll-down-command)
(global-set-key (kbd "C-\\") 'scroll-up-command)
