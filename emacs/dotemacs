;; -*- mode: emacs-lisp -*-
;; Necesitas una branch para el archivo de casa1
;; Another one for work

;; Actualiza helm
;; C-z should be a prefix command

;; You need to set the whole file in org mode for drawers
;; and additional references

;; (load-file (concat user-emacs-directory "cedet/cedet-devel-load.el"))
;; (load-file (concat user-emacs-directory "cedet/contrib/cedet-contrib-load.el"))

;;; Global theme customisation
(setq custom-enabled-themes '(misterioso))
(load-theme 'misterioso t)
;;	 Fuera barras de desplazamiento
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;	I do not want a welcome message
(setq inhibit-startup-message t)

;; Mode line stuff
;; (display-time-mode t)
(column-number-mode t)
;; (size-indication-mode t)

;; Global unsets
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-M-z") 'suspend-frame)

;; Fast motion
(global-set-key (kbd "C-z C-k") 'windmove-up)
(global-set-key (kbd "C-z C-j") 'windmove-down)
(global-set-key (kbd "C-z C-h") 'windmove-left)
(global-set-key (kbd "C-z C-l") 'windmove-right)

;; Paquetes y esas cosas
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ;; ("marmalade" . "http://marmalade-repo.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)
(global-set-key (kbd "C-z M-p") 'package-list-packages)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Fast .emacs opening ;;;;
;; Section: customizing emacs
(global-set-key (kbd "C-z .") '(lambda () (interactive) (find-file "~/.emacs")))
(global-set-key (kbd "C-z ,") '(lambda () (interactive) (dired "~/.emacs.d/")))

;;; Beautification ;;;;;;;
(tool-bar-mode -1)
(menu-bar-mode -1)

;;; La Carte for menus
;; Section: menus
;; (global-set-key (kbd "C-z C-c") 'lacarte-execute-menu-command)

;; Revisa esto, es codigo feo
;; (load-file "~/.emacs.d/etags-select.el")
;; (load-file "~/.emacs.d/tags.el")
;; Mira para que es require
;; (require 'etags-select)

;; (define-prefix-command 'etags-prefix nil "Tags action: b (build), v (visit)")
;; (global-set-key (kbd "C-z t") 'etags-prefix)
;; (define-key etags-prefix (kbd "b") 'build-ctags)
;; (define-key etags-prefix (kbd "v") 'visit-tags-table)

;; I-resize mode
;; Tienes que mejorar este codigo, es una puta mierda
;; Section about windows
(load-file "~/.emacs.d/iresize.el")
(require 'iresize)
(global-set-key (kbd "C-z r") 'iresize-mode)

;; Motion mode (section about motion)
(load-file "~/.emacs.d/motion-mode.el")

;; Las dos que siguen, yas y autocomplete
;; A ver si consigues enterarte de como remapear yas-expand para que sea
;; C-y y autocomplete sea el puto tab de los cojones
;; !!!!!!!!!!!!!!!!!!!

;; Auto-complete settings
;; (load-file "~/.emacs.d/autocomplete-start.el")

;; Avance progresivo
;; Section: scrolling, moving
;; (setq scroll-step 1)

;; Shell mode
(add-hook 'shell-mode-hook (lambda () (interactive)(define-key shell-mode-map (kbd "C-c i") 'send-invisible)))
(add-hook 'shell-mode-hook (lambda () (interactive)(define-key shell-mode-map (kbd "C-'") '(lambda () (interactive) (insert "-")))))
(global-set-key (kbd "C-z C-s") 'shell)
;; (define-key shell-mode-hook (kbd "C-c C-w") 'woman)

;; Imenu and insert file
(global-set-key (kbd "C-x M-i") 'insert-file)
(global-set-key (kbd "C-x i") 'imenu)

;; Viper mode
;; Superseded by motion mode
;; (global-set-key (kbd "C-x C-z") 'toggle-viper-mode)

;; Cosas de parentesis e ido
(electric-pair-mode t)
(show-paren-mode t)

;; Ido es pesadisimo, tendras que encontrar alterantivas
;; (ido-mode t)
(global-set-key (kbd "C-x C-j") 'idomenu)

;; Yanking in the opposite direction
;; Yanking text section
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))

(global-set-key (kbd "C-M-y") 'yank-pop-forwards)

;; Mas atajos de teclado para comodidad
(global-set-key (kbd "C-M-]") 'eval-expression)
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
(global-set-key (kbd "C-z p") 'pop-tag-mark)
(global-set-key (kbd "C-x l") 'kill-whole-line)
(global-set-key (kbd "C-z c") 'count-lines-page)
;; (global-set-key (kbd "C-x p") 'switch-to-prev-buffer)
;; (global-set-key (kbd "C-x p") 'previous-buffer)
(defun switch-to-previous-buffer ()
  "Goes to the most recent previous buffer"
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
(global-set-key (kbd "C-x p") 'switch-to-previous-buffer)

;; Anything mode
;; Cambialo por helm inmediatamente
;; (require 'anything)
;; (global-set-key (kbd "C-x a") 'anything)
(load-file "~/.emacs.d/helm-config.el")
(global-set-key (kbd "C-x a") 'helm-mini)



;; (global-set-key (kbd "C-q m") 'anything-help)
;; (define-key helm-map (kbd "C-q m") 'helm-help)

;; Help key bindings
(global-set-key (kbd "C-q") 'help-command)
(global-set-key (kbd "C-q C-w") 'where-is)
;; (global-set-key (kbd "C-q G") 'describe-gnu-project)
(global-set-key (kbd "C-q g") 'find-function) ; Go to function definition
(global-set-key (kbd "C-q C-q") 'quoted-insert)
(global-set-key (kbd "C-h") 'delete-backward-char)

;; ERC
(global-set-key (kbd "C-z e") 'erc-iswitchb)
(setq erc-log-channels-directory "~/log")
(setq erc-save-buffer-on-part t)
(setq erc-hide-timestamps t)

;; yas-snippets
;; (require  'yasnippet)
;; (load-file "~/.emacs.d/yas-start.el")

;; (define-key erc-mode-map (kbd "C-c q") 'erc-cmd-QUERY)

;; AuCTeX stuff
;; Section: text languages
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; For the navigator
;; (setq browse-url-browser-function 'w3m-browse-url)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program modes start here ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Como puedo hacer para que solo se cargue el fichero si se llama al modo
;; Y en una sola vez, se haga en sucesivas aperturas de ficheros de tal modo

;; PHP
;; (load-file "~/.emacs.d/php-start.el")

;; Perl
;; (load-file "~/emacs/.emacs.d/perl-mode-start.el")

;; Python
;; Arreglalo, no se que cojones le pasa a todos esos paquetes
;; (load-file "~/.emacs.d/python-start.el") 

;; HTMl

;; Java
;; (load-file "~/.emacs.d/java-start.el")

;; Haskell
;; (load-file "~/.emacs.d/haskell-mode-start.el")

;; Bash

;; emacs-lisp-mode
(load-file "~/.emacs.d/elisp-mode-start.el")

;; c-mode
(load-file "~/.emacs.d/c-mode-setup.el")

;;; javascript
(load-file "~/.emacs.d/js-mode.el")

;; C++

;; ASM
;; (load-file "~/.emacs.d/asm-start.el")

;;; Scheme
;; (load-file "~/emacs/.emacs.d/scheme-start.el")

;; Maple

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program modes end here ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ibus
;; (setq instalacion "~/.emacs.d/")
;; (load-file (concat instalacion "ibus-dev.el"))
;; (global-set-key (kbd "C-c C-\\") 'ibus-mode)
;; (defun start-ibus ()
;;   (interactive)
;;   (ibus-enable)
;;   (ibus-mode)
;;   )
;; (global-set-key (kbd "C-z M-b") 'start-ibus)

;; Sudo editing of files
;; Hazlo con TRAMP
;; (defun su-edit ()
;;   "Edit the current buffer file as superuser."
;;   (interactive)
;;   (let ((window-start (window-start))
;;         (point        (point))
;;         (mark (if mark-active (region-beginning) nil)) )
;;     (find-alternate-file (format "/sudo::%s" (buffer-file-name)))
;;     (if mark (set-mark mark))
;;     (goto-char point)
;;     (set-window-start nil window-start) ; nil - the selected window
;;     ))

;; Function for swapping windows

;; GNUS
;; (load-file "~/.gnus.el")
;; (global-set-key (kbd "C-z g") 'gnus)

;; Dictionary mode for w3m
;; (require 'w3m)
;; (define-key w3m-mode-map (kbd "C-c d") 'dic-lookup-w3m)
;; (define-key w3m-mode-map (kbd "o") 'w3m-view-this-url)
;; (define-key w3m-mode-map (kbd "y") 'w3m-view-previous-page)
(global-set-key (kbd "C-z t") 'youdao-dictionary-search-at-point)

;; Eclim
;; Ponlo en JAVA
;; (require 'eclim)
;; (require 'eclimd )
;; (setq eclim-executable "/opt/eclipse/eclim")
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
 '(browse-url-browser-function (quote browse-url-firefox))
 '(browse-url-firefox-program "/usr/bin/firefox")
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-enabled-themes (quote (solarized-dark)))
 '(custom-safe-themes (quote ("05c3bc4eb1219953a4f182e10de1f7466d28987f48d647c01f1f0037ff35ab9a" "6a9606327ecca6e772fba6ef46137d129e6d1888dcfc65d0b9b27a7a00a4af20" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(eclim-eclipse-dirs (quote ("/opt/eclipse")))
 '(fci-rule-color "#073642")
 '(flycheck-keymap-prefix "f")
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors (--map (solarized-color-blend it "#002b36" 0.25) (quote ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors (quote (("#073642" . 0) ("#546E00" . 20) ("#00736F" . 30) ("#00629D" . 50) ("#7B6000" . 60) ("#8B2C02" . 70) ("#93115C" . 85) ("#073642" . 100))))
 '(hl-bg-colors (quote ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors (quote ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(magit-diff-use-overlays nil)
 '(magit-use-overlays nil)
 '(org-agenda-files (quote ("~/org/remember.org" "~/org/work.org")))
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map (quote ((20 . "#dc322f") (40 . "#c85d17") (60 . "#be730b") (80 . "#b58900") (100 . "#a58e00") (120 . "#9d9100") (140 . "#959300") (160 . "#8d9600") (180 . "#859900") (200 . "#669b32") (220 . "#579d4c") (240 . "#489e65") (260 . "#399f7e") (280 . "#2aa198") (300 . "#2898af") (320 . "#2793ba") (340 . "#268fc6") (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list (quote (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83")))
 '(which-function-mode t))
(setq eclimd-executable "/opt/eclipse/eclimd")
;; (setq eclimd-wait-for-process nil)
;; start-eclimd para iniciar el demonio
;; Esto tendras que verlo, en autocomplete
;; (require 'auto-complete-config)
;; (ac-config-default)
;; (require 'ac-emacs-eclim-source)
;; (ac-emacs-eclim-config)

;; ECB
;; (require 'ecb)
;; (global-set-key (kbd "C-x C-M-e") 'ecb-minor-mode)
;; (define-prefix-command 'ecb-myprefix nil "Goto ECB Frame (1,2,c,d,h,m,s)")
;; (define-key ecb-mode-map (kbd "C-c C-.") 'ecb-myprefix)
;; (define-key ecb-myprefix (kbd "1") 'ecb-goto-window-edit1)
;; (define-key ecb-myprefix (kbd "2") 'ecb-goto-window-edit2)
;; (define-key ecb-myprefix (kbd "c") 'ecb-goto-window-compilation)
;; (define-key ecb-myprefix (kbd "d") 'ecb-goto-window-directories)
;; (define-key ecb-myprefix (kbd "h") 'ecb-goto-window-history)
;; (define-key ecb-myprefix (kbd "m") 'ecb-goto-window-methods)
;; (define-key ecb-myprefix (kbd "s") 'ecb-goto-window-sources)

;; Quiza todo lo de semantic deberia ir aqui

;; Flymake stuff
;; SHOULD DISPLAY ERRORS IN BUFFER
;; Customize how flymake displays the errors
'(flymake-errline ((((class color)) (:underline "OrangeRed"))))
'(flymake-warnline ((((class color)) (:underline "yellow"))))
;; Define our own flymake error function
(defun my-flymake-show-next-error ()
  (interactive)
  (flymake-goto-next-error)
  (flymake-display-err-menu-for-current-line))
;; And set it to the shortcut C-c C-v
;; (add-hook 'c-mode-common-hook
;;   (lambda ()
;;     ;; (flymake-mode t)
;;     ;; (global-set-key "\C-c\C-v" 'my-flymake-show-next-error)
;;     ))

;; Macros
;; Use M-RET as a macro prefix
;; Dot mode for redoing
;; Cx q kbd-macro-query en el prefijo que dije antes
;; Repeat last command?
(global-set-key (kbd "C-.") 'repeat)
;; Look commands for marking different objects
(global-set-key (kbd "C-z SPC") 'delete-trailing-whitespace)
;; ibuffer mode
;; (global-set-key (kbd "C-x C-b") 'ibuffer-list-buffers)
(global-set-key (kbd "C-x C-b") 'ibuffer)
;; iswitchbf-highlight
;; (load-file "~/emacs/.emacs.d/switchwindow.el")
;; usa mas los menus
;; iswitch menu no funciona, pero usa los menos de alguna forma

;; Icicles
;; You should set a prefix key for all things icicles
(global-set-key (kbd "C-x c") 'icy-mode)
;; icicle-goto-marker
;; icicle-goto-global-marker

;; Find file other vertical window
(defun iswitchb-other-window-vertical ()
  "Switching to another buffer, but this shows on a upright window"
  (interactive)
  (split-window-right)
  (iswitchb-buffer-other-window))
(global-set-key (kbd "C-x 4 C-b") 'iswitchb-other-window-vertical)

;; X WINDOWS
;; kill-buffer-other-window
;; swap-windows

(global-set-key (kbd "C-x x") 'other-window)

(defun swap-previous ()
  "Swap window with the previous one"
  (interactive)
  (let ((this-win-buffer (current-buffer))
	(prev-window-buffer (window-buffer (previous-window)))
	)
    (set-window-buffer (previous-window) this-win-buffer)
    (set-window-buffer (selected-window) prev-window-buffer)
    (select-window (previous-window))))

(defun swap-next ()
  "Swap window with the next one"
  (interactive)
  (let ((this-win-buffer (current-buffer))
	(next-window-buffer (window-buffer (next-window)))
	)
    (set-window-buffer (next-window) this-win-buffer)
    (set-window-buffer (selected-window) next-window-buffer)
    (select-window (next-window))))

(global-set-key (kbd "C-z k") 'swap-previous)
(global-set-key (kbd "C-z j") 'swap-next)

;; X MOTION
;; Puedes reasignar C-M-v scroll-other-window

;;; 7.2 MOVING THE POINT

;; Other window scroll'
(global-set-key (kbd "C-x P") 'mark-page)
(global-set-key (kbd "C-x C") 'set-goal-column)
(global-set-key (kbd "C-x C-n") 'scroll-other-window)
(global-set-key (kbd "C-x C-p") 'scroll-other-window-down)

;; Paragraph motion
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

;; Better bindings for beginning and end of buffer
(global-set-key (kbd "C-z C-,") 'beginning-of-buffer)
(global-set-key (kbd "C-z C-.") 'end-of-buffer)



;; Smooth scrolling
(setq scroll-step 1)

;;; Scroll commands
;;; I can't keep the C-z combo active after each use, pain in the ass
;; (global-set-key (kbd "C-z C-n") 'scroll-up-command)
;; (global-set-key (kbd "C-z C-p") 'scroll-down-command)

;;; 9 - RUNNING COMMANDS BY NAME
;;; execute-extended-command
;; Substitued by helm-M-x
;; (global-set-key (kbd "C-z C-e") 'execute-extended-command)

;; 11 MARK
;; (delete-selection-mode ) ; causes self-insert-command to replace text in the active region
;; Another library for marking things thing-cmds.el (ThingAtPointCommands)
;; Need to make this library run, seems a lot better
;; Automark
;; Mark-tools
;; MakingMarkVisible
;; Anything mark
;; Con icycles para ver el mark ring

;; http://www.emacswiki.org/emacs/MarkCommands

;; Thing at point and add-ons
(require 'thing-cmds)
;; (thgcmd-bind-keys) ; Only if you want the key bindings it defines

(defun mark-a-word-or-thing (arg)
  "Select word on or before current point, and move point to beginning of word.

    With a prefix ARG, first prompts for type of things and select ARG things
    but you need to move the point to the beginnig of thing first.

    But if a thing has been selected, then extend the selection by one thing
    on the other side of the point.
    (So to select backwards, select to the right first.)"
  (interactive "P")
  (if (or arg mark-active)
      (call-interactively 'mark-thing)
    (skip-syntax-backward "w_")
    (mark-thing 'symbol)))

(global-set-key (kbd "C-x w") 'mark-a-word-or-thing)

;;; Browsing mark ring
(global-set-key (kbd "C-z f") 'forward-mark)
(global-set-key (kbd "C-z b") 'backward-mark)
(global-set-key (kbd "C-z s") 'show-marks)

;;; Browsing the kill ring (Melpa package)
;; Section: killing
;;; Superseded by helm
;; (require 'browse-kill-ring)
;; (global-set-key (kbd "C-z y") 'browse-kill-ring)

;; RECTANCLES

;; 13 REGISTERS
;; view-register es extremadamente ineficiente
;; I don't know which registers have bound values
;; anything register interface
;; Position registers, how to jump fast to them

;;; 14 DISPLAY
;;; Line truncation
(global-set-key (kbd "C-z M-t") 'toggle-truncate-lines)

;;; 18 FILES
;;;
;; Inserts the default directory into the minibuffer as the initial contents
;; (setq insert-default-directory nil)
;; (global-set-key (kbd "C-z M-p") 'pwd)
;;; List of functions to be called after a file is successfully loaded
;; (setq find-file-hook ?)


;;; 19 BUFFERS
(defun kill-buffer-other-window ()
  "Kills buffer in the other window, make sure there are only two of them"
  (interactive)
  (other-window 1)
  (kill-buffer)
  (other-window 1)
  (delete-other-windows)
  )
(global-set-key (kbd "C-z C-w") 'kill-buffer-other-window)

(global-set-key (kbd "C-z C-q") 'kill-buffer-and-window)

;;; Fast buffer switch
(global-set-key (kbd "C-z C-p") 'previous-buffer)
(global-set-key (kbd "C-z C-n") 'next-buffer)
;; (global-set-key (kbd "M-v") 'previous-buffuer)
;; (global-set-key (kbd "C-v") 'next-buffer)

;; iswitch buffer para C-x 4 b
(iswitchb-mode 1)

;;; Don't ask for confirmation before killing an unmodified buffer
 (defun volatile-kill-buffer ()
   "Kill current buffer unconditionally."
   (interactive)
   (let ((buffer-modified-p nil))
     (kill-buffer (current-buffer))))
(global-set-key (kbd "C-x k") 'volatile-kill-buffer)

;; No ask to kill buffer
(setq buffer-offer-save nil)

;;; Change undo
;; (global-set-key (kbd "C-u") 'universal-argument)
;;; Helm-mini-buffer switch (most common inefficient operation)
;; (global-set-key (kbd "C-/") 'undo)
;; (global-set-key (kbd "C-x u") 'undo)
;; (global-set-key (kbd "<C-menu>") 'helm-buffers-list)
(global-set-key (kbd "C-\\") 'helm-buffers-list)

;;; 22 INTERNATIONAL
(global-set-key (kbd "C-z M-i") 'set-input-method)
(global-set-key (kbd "C-z C-M-i") 'toggle-input-method)

;;; 24 - INDENTATION
;; (setq-default tab-width 4)

(global-set-key (kbd "C-z i") 'indent-relative)

;; 28 MAINTAINING LARGE PROGRAMMES

(global-set-key (kbd "C-z C-g") 'grep)

;;; Compile mode
(defun notify-compilation-result(buffer msg)
  "Notify that the compilation is finished,
close the *compilation* buffer if the compilation is successful,
and set the focus back to Emacs frame"
  (if (string-match "^finished" msg)
      (tooltip-show "Compilation Successful :-)")
    (tooltip-show "Compilation Failed :-("))
  (switch-to-buffer buffer))
(add-to-list 'compilation-finish-functions 'notify-compilation-result)

;; (global-set-key (kbd "C-z C-c") 'compile)
;; (global-set-key (kbd "C-z C-c") '(lambda () "" (interactive) (compile "cd /home/adrian/projects/rtk-20130208-8676S-Router2015/ && ./build.sh full PROFILE=router2015_tesa_changhong_8676s CROSS_COMPILE=/home/adrian/toolchain/TOOLCHAIN-RTL8676S/rsdk-1.5.8-4281-EB-2.6.30-0.9.30.3-m32ub-120907/bin/mips-linux- RSDK=/home/adrian/toolchain/TOOLCHAIN-RTL8676S/rsdk-1.5.8-4281-EB-2.6.30-0.9.30.3-m32ub-120907/ && cp linux-2.6.x/vm.img ~/a.img")))

;; Diff mode
(require 'diff-mode)
(define-key diff-mode-map (kbd "M-p") 'diff-file-prev)
(define-key diff-mode-map (kbd "M-n") 'diff-file-next)

;; 28.1 VERSION CONTROL
;; the default face for marked log entries are too hard to spot
;; http://lgfang.github.io/emacs/emacs-vc.html
;; http://www.emacswiki.org/emacs/VersionControl
;; http://www.emacswiki.org/emacs/Git
;; http://alexott.net/en/writings/emacs-vcs/EmacsGit.html
;; Magit, most popular interface
(autoload 'magit-status "magit" nil t)
(global-set-key (kbd "C-z m") 'magit-status)
;; magit-repo-dirs (default repositories to look at after magit-status)
;; I do not want to ask for confirm every time i follow symlink to vc file
(setq vc-follow-symlinks nil)

;;; WHAT THE FUCK IS THIS BULLSHIT
;; (eval-after-load "vc-hooks" '(define-key vc-prefix-map "=" 'ediff-revision))
;; (eval-after-load 'vc-dir
;;   (progn
     ;; (define-key vc-dir-mode-map (kbd "d") 'vc-diff)
     ;; (define-key vc-dir-mode-map (kbd "E") 'vc-ediff)

;; More practical keystrokes
(global-set-key (kbd "C-z l") 'load-file)
;; This should go in 25 (Commands for human languages) 25.5 Filling text
(global-set-key (kbd "C-z C-f") 'fill-region)

;;; 30 DIRED
;; Just a single dired buffer
;; Por que cojones no funciona?
;; (require 'dired-single)
;;;
;; (define-key dired-mode-map (kbd "C-c C-w") 'wdired-change-to-wdired-mode)
;; Symbol's value as variable is void: dired-mode-map
;; Solo se carga el valor de dired-mode-map al arrancar dired?
;; En forma de hook?

;;; Inactivie minibuffer mode
(define-key minibuffer-local-map (kbd "C-'") 'print-hyphen)

(defun kill-all-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let ((count 0))
      (dolist (buffer (buffer-list))
	(set-buffer buffer)
	(when (equal major-mode 'dired-mode)
	  (setq count (1+ count))
	  (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count))))

(global-set-key (kbd "C-x C-d") 'kill-all-dired-buffers)

;; Reference card things ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Learn about dired, dired enhanced ;;

;;; Anything setup
;;; http://www.emacswiki.org/emacs/Anything
;;; http://metasandwich.com/2010/07/30/what-can-i-get-for-10-dolla-anything-el/
;;; anything.el basic stuff, anything-


;;; Org mode
(load-file "~/.emacs.d/org-start.el")

;;; InfoMode stuff ;;;
(define-key Info-mode-map (kbd "o") 'Info-follow-nearest-node)
(define-key Info-mode-map (kbd "y") 'Info-history-back)
(define-key Info-mode-map (kbd "S-SPC") 'Info-scroll-down)

;;; Open scratch buffer
(defun switch-to-temporary-buffer ()
  "Switches to scratch temporary buffer"
  (interactive)
  (pop-to-buffer "temp"))
(global-set-key (kbd "C-z C-b") 'switch-to-temporary-buffer)

;;; Print working dir
(global-set-key (kbd "C-z w") 'pwd)

;;; Winner mode configuration
(winner-mode)
(define-key winner-mode-map (kbd "C-z C-;") 'winner-undo)
(define-key winner-mode-map (kbd "C-z C-'") 'winner-redo)

;;; Highlight line mode
(hl-line-mode t)
(setq hl-line-sticky-flag t)

;; /* Yasnippet shouldn't expandd automatically' */
;; /* Whhat's the fucking difference between ac-complete-c-headers and  ac-c-headers ?*/
;;; Autocmplete sin necesidad de haber escrito algo, con lo que llevo de antes
;;; flymake support for c
;;; How to expand the first option with tab?
;;; fucking include snippet sucks dick
;;; better yasnippet collection for c and cc mode, standard one sucks cock
;;; gnu global-set-key for c files, helm interface for it would be best
;;; Difference c-mode-hook c-mode-common-hook

(require 'yasnippet)
(yas-load-directory "~/.emacs.d/elpa/yasnippet-20141102.1554/snippets/")

;;; Autocomplete:
;;;	Poder completar sin tener que aniadir caracteres
;;;	Completar la primera entrada sin tener que bajar
;;;	Consultar comodamente las fuentes
;;; Yasnippet
;;;	Better snippet collection
;;; Flymake
;;;	Solo funciona si hay un Makefile con el objetivo CHK en el directorio actual, no podria cambiarse?
;;;	What's the flymake"
;;;	flymake for shell?
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highline-face ((t (:background "grey18"))) t)
 '(iedit-occurrence ((t (:inherit highlight :background "gold")))))

;;; ERC, eventually move it into its own file
(global-set-key (kbd "C-z 1") 'erc)

;;; Auto-fill mode, change section
(global-set-key (kbd "C-z M-f") 'auto-fill-mode)

;;; Mejorar
;; (global-set-key (kbd "C-]") 'scroll-down-command)
;; (global-set-key (kbd "C-\\") 'scroll-up-command)

;; Proyecto actual
(defun open-project ()
  "Nada"
  (interactive)
  (find-file "~/projects/rtk-20130208-8676S-Router2015/user/boa/src/LINUX/"))
(global-set-key (kbd "C-z 2") 'open-project)

;; Google translate, read the code
(require 'google-translate)
(require 'google-translate-default-ui)
(global-set-key (kbd "C-z C-M-g") 'google-translate-at-point)
(global-set-key (kbd "C-z M-g") 'google-translate-query-translate)

;; Ediff setup
(require 'ediff )
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)
(global-set-key (kbd "C-z d") 'vc-ediff)
(global-set-key (kbd "C-z C-d") 'ediff)
;; (define-key 'ediff-mode-map (kbd "C-c C-n") 'ediff-trees-examine-next)
;; (define-key 'ediff-mode-map (kbd "C-c C-p") 'ediff-trees-examine-previous)
;; (global-set-key (kbd "C-z C-M-n") 'ediff-trees-examine-next)
;; (global-set-key (kbd "C-z C-M-p") 'ediff-trees-examine-previous)

;; (define-key makefile-mode-map (kbd "C-c C-j") 'idomenu)

;; Hide modeline
(defvar-local hidden-mode-line-mode nil)
(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
(global-set-key (kbd "C-M-'") 'hidden-mode-line-mode)

;;; I don't always want annoying line numbers
(global-set-key (kbd "C-z z") 'nlinum-mode)
;; If you want to hide the mode-line in every buffer by default
;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)

;; hideifdef
(load-file "~/.emacs.d/hideif.el")
(setq hide-ifdef-mode-prefix-key "f")
;; (define-key hide-ifdef-mode-map (kbd "C-c C-s s") 'show-ifdef-block)
;; (define-key hide-ifdef-mode-map (kbd "C-c C-s d") 'hide-ifdef-block)

;;; hideshow
;; (defvar hs-minor-mode-prefix "\C-c\C-f"
;;   "*Prefix key to use for hideshow commands in hideshow minor mode.")
;; (define-key c-mode-map (kbd "C-c C-s h") 'hs-hide-block)
;; (define-key c-mode-map (kbd "C-c C-s s") 'hs-show-block)

(put 'narrow-to-region 'disabled nil)

;;; Web mode
(defun my/open-buffer-firefox ()
  (interactive)
  (shell-command (concat "firefox " (buffer-name)))
  )

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(define-key web-mode-map (kbd "C-c r") 'my/open-buffer-firefox)
(define-key web-mode-map (kbd "C-c c") 'web-mode-element-close)
(put 'dired-find-alternate-file 'disabled nil)
(define-key web-mode-map (kbd "C-c C-c") '(lambda () "" (interactive)
					  (copy-file (buffer-file-name) "/home/adrian/projects/rtk-20130208-8676S-Router2015/romfs/home/httpd/web/" 1)))
;; (define-key js2-minor-mode-map (kbd "C-c C-c") '(lambda () "" (interactive)
;; 					  (copy-file (buffer-file-name) "/home/adrian/projects/rtk-20130208-8676S-Router2015/romfs/home/httpd/web/" 1)))

(add-hook 'web-mode-hook 'my:js2-start)

(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

;; (define-key vc-dir-mode-map (kbd "d") 'vc-diff)

;;; Projectile customizations

;; (setq projectile-keymap-prefix (kbd "C-z p"))
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(setq projectile-indexing-method 'alien)
(setq projectile-enable-caching t )
(define-key projectile-mode-map (kbd "C-c p C-g") 'projectile-grep)
(global-set-key (kbd "C-c h g C-c") 'ahg-do-command)

(setq projectile-switch-project-action 'projectile-dired)
(global-set-key (kbd "C-\\") 'projectile-switch-to-buffer)

;;; Gotolastchange
(global-set-key (kbd "C-z C-c") 'goto-last-change)

(global-set-key (kbd "C-z z") 'repeat-complex-command)

(global-anzu-mode)
